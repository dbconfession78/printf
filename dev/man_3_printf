.TH _printf 1 "March 20, 2017" "version 1.0" "Linux Programmer's Manual"
.SH NAME
_printf
.SH SYNOPSIS

 #include <stdio.h>
 #include <stdarg.h>
 #include "holberton.h"

.BI "int _printf(const char *"format ", ...);"
.SH DESCRIPTION
.RI "Writes output to "  stdout ", the standard output stream."

.RI "Writes output under the control of a " format " string that specifies how subsequent arguments are converted for output."
.SS Return value
Upon succesful return, _printf returns the number of characters printed (excluding the terminating null byte ('\\0') used to end the output to strings).

If an output error is encountered, a negative value is returned.

.SS Format of the format string
.RB "The format string is a character string, beginning and ending in its initial shift state, if any. The format string is composed of zero of more directives: ordinary characters (not "% "), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character "% ", and ends with "
.IR "conversion specifier" ". In between there may be (in this order) zero or more " "flags" ", an optional minimum " "field width" ", an optional " " precision" " and an optional " "length modifier".

The arguments must correspond properly with the conversion specifier.  By default, the arguments are used in the order given, where each conversion specifier asks for the next argument (returning an error if the number of specifiers doesn't match number of arguments).

.SS Sample Use
    _printf("Let's try to printf a simple sentence.\n");
    _printf("Length:[%d, %i]\n", len, len);
    _printf("Unsigned:[%u]\n", ui); %i]\n", len, len);
    _printf("Negative:[%d]\n", -762534);
    _printf("Unsigned octal:[%o]\n", ui);
    _printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
    _printf("Character:[%c]\n", 'H');
    _printf("String:[%s]\n", "I am a string !");
    _printf("Address:[%p]\n", addr);
.SH BUGS
doesn't handle strings longer than 1024 bytes

.SH AUTHOR
 Stuart Kuredjian,  108@holbertonschool.com
 Christian Agha,  112@holbertsonschool.com
